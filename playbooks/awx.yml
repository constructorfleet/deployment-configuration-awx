---

- name: AWX Install/Configure
  gather_facts: true
  remote_user: root
  hosts:
    - awx
  vars:
    broadcast_websocket_secret: '{{ awx_secret_key }}'
  tasks:
    - name: Prepare variables for use in services
      ansible.builtin.include_tasks:
        file: tasks/convert_variables_to_expected_format.yml
      tags:
        - install-awx
        - configure-awx

    - name: Install AWX
      block:
        - name: Install Tower-CLI package
          ansible.builtin.pip:
            name: ansible-tower-cli
            state: present

        - name: Create {{ awx_docker_compose_dir }} directory
          ansible.builtin.file:
            path: "{{ awx_docker_compose_dir }}"
            state: directory

        - name: Create Redis socket directory
          ansible.builtin.file:
            path: "{{ awx_docker_compose_dir }}/redis_socket"
            state: directory
            mode: 0777

        - name: Create Docker Compose Configuration
          ansible.builtin.template:
            src: "awx/{{ item }}.j2"
            dest: "{{ awx_docker_compose_dir }}/{{ item }}"
          loop:
            - environment.sh
            - credentials.py
            - nginx.conf
            - redis.conf

        - name: Render SECRET_KEY file
          ansible.builtin.copy:
            content: "{{ awx_secret_key }}"
            dest: "{{ awx_docker_compose_dir }}/SECRET_KEY"

        - name: Build Docker Compose Project
          ansible.builtin.include_role:
            name: docker
          vars:
            docker_compose_projects: "{{ awx_compose_project }}"

        - name: Check AWX Installation Complete via Ping API
          ansible.builtin.uri:
            url: '{{ awx_server_url }}/api/v2/ping'
          retries: 300
          delay: 5
          until: awx_ping_result.status == 200
          register: awx_ping_result
          changed_when: '{{ awx_ping_result.status == 200 }}'
          no_log: false
          ignore_errors: true

        - name: Assert AWX Install/Upgrade Complete
          ansible.builtin.assert:
            that:
              - '{{ awx_ping_result is not failed }}'
            fail_msg: 'AWX Install/Upgrade is taking awhile, come back later for configuration.'
            success_msg: 'AWX Install/Upgrade is complete!'

        - name: Update CA trust in awx_web container
          ansible.builtin.command:
            cmd: "docker exec {{ item }} '/usr/bin/update-ca-trust'"
          loop:
            - awx-web
            - awx-task

        - name: Install Tower CLI Python Package
          ansible.builtin.command:
            cmd: "docker exec {{ item }} '/usr/bin/python3' '-m' 'pip' 'install' '--upgrade' 'ansible-tower-cli'"
          loop:
            - awx-web
            - awx-task

        - name: Install Tower CLI Python Package
          ansible.builtin.command:
            cmd: "docker exec {{ item }} '/usr/bin/python3' '-m' 'pip' 'install' '--upgrade' 'jmespath'"
          loop:
            - awx-web
            - awx-task
      tags:
        - install-awx

    - name: Configure AWX
      block:
        - name: Create AWX OAuth Token
          awx.awx.tower_token:  # noqa
            description: Build Server Configuring AWX
            scope: write
            state: present
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_username: "{{ awx.admin_user }}"
            tower_password: "{{ awx.admin_password }}"

        - name: Create AWX Organizations
          awx.awx.tower_organization:
            name: "{{ item.name }}"
            state: "{{ item.state | default('present') }}"
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: '{{ organizations | default([]) }}'
          loop_control:
            label: '{{ item.name }}'

        - name: Create Additional Tower Credential Types
          awx.awx.tower_credential_type:
            name: "{{ item.name }}"
            description: "{{ item.description | default(omit) }}"
            kind: "{{ item.kind }}"
            inputs: "{{ item.inputs | default(omit) }}"
            injectors: "{{ item.injectors | default(omit) }}"
            state: "{{ item.state | default('present') }}"
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: "{{ awx_credential_types | default([]) }}"
          loop_control:
            label: "{{ item.name }}"

        - name: Create Tower Credentials
          awx.awx.tower_credential:
            name: "{{ item.name }}"
            organization: "{{ item.organization | default('Default') }}"
            state: "{{ item.state | default('present') }}"
            inputs: "{{ item.inputs|default(omit) }}"
            credential_type: "{{ item.credential_type }}"
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: "{{ awx_credentials | default([]) }}"
          loop_control:
            label: "{{ item.name }}"

        - name: Create AWX Inventories
          awx.awx.tower_inventory:
            name: '{{ inventory.name }}'
            description: '{{ inventory.description | default(omit) }}'
            organization: '{{ inventory.organization }}'
            variables: '{{ inventory.variables | default(omit) }}'
            kind: '{{ inventory.kind | default(omit) }}'
            host_filter: '{{ (inventory.host_filter | default(omit)) if (inventory.kind | default("")) == "smart" else omit }}'
            state: '{{ inventory.state | default("present") }}'
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: '{{ awx_inventories | default([]) }}'
          loop_control:
            loop_var: inventory
            label: '{{ inventory.name }}'

        - name: Create AWX Inventory Sources
          awx.awx.tower_inventory_source:
            name: '{{ inv.source.name }}'
            description: '{{ inv.source.description | default(omit) }}'
            inventory: '{{ inv.name }}'
            source: '{{ inv.source.kind }}'
            source_path: '{{ inv.source.path | default(omit) }}'
            source_vars: '{{ inv.source.variables | default(omit) }}'
            enabled_var: '{{ inv.source.enabled.var | default(omit) }}'
            enabled_value: '{{ inv.source.enabled.value | default(omit) }}'
            host_filter: '{{ inv.source.host_filter | default(omit) }}'
            credential: '{{ inv.source.credential | default(omit) }}'
            overwrite: '{{ inv.source.overwrite | default(omit) }}'
            overwrite_vars: '{{ inv.source.overwrite_vars | default(omit) }}'
            update_on_launch: '{{ inv.source.update_on_launch | default(True) }}'
            update_on_project_update: '{{ inv.source.update_on_project | default(omit) }}'
            source_project: '{{ inv.source.project | default(omit) }}'
            state: '{{ inv.source.state | default("present") }}'
            validate_certs: '{{ awx.validate_certs }}'
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: '{{ awx_inventories | default([]) }}'
          loop_control:
            loop_var: inv
            label: '{{ inv.source.name }}'
          when:
            - inv.source is defined

        - name: Update AWX LDAP Settings
          awx.awx.tower_settings:
            settings: "{{ awx_ldap_auth | items2dict(key_name='name', value_name='value') | default([]) }}"
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'

        - name: Add projects to Tower
          awx.awx.tower_project:
            name: "{{ project.name }}"
            description: "{{ project.description | default(omit) }}"
            scm_type: "{{ project.scm_type | default(omit) }}"
            scm_credential: "{{ project.scm_credential | default(omit) }}"
            scm_clean: "{{ project.scm_clean | default(omit) }}"
            scm_branch: "{{ project.scm_branch | default(omit) }}"
            scm_update_on_launch: "{{ project.scm_update_on_launch | default(omit) }}"
            scm_update_cache_timeout: "{{ project.scm_update_cache_timeout | default(omit) }}"
            scm_url: "{{ project.scm_url | default(omit) }}"
            local_path: "{{ project.local_path | default(omit) }}"
            organization: "{{ project.organization | default('Default') }}"
            state: "{{ project.state | default('present') }}"
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: "{{ awx_projects | default([]) }}"
          loop_control:
            loop_var: project
            label: "{{ project.name }}"

        - name: Add job templates to Tower
          awx.awx.tower_job_template:
            name: "{{ item.name }}"
            description: "{{ item.description | default(item.name) }}"
            project: "{{ item.project }}"
            playbook: "{{ item.playbook }}"
            job_type: "{{ item.job_type | default('run') }}"
            fact_caching_enabled: "{{ item.fact_caching_enabled | default(omit) }}"
            diff_mode_enabled: "{{ item.diff_mode_enabled | default(omit) }}"
            concurrent_jobs_enabled: "{{ item.concurrent_jobs_enabled | default(omit) }}"
            force_handlers_enabled: "{{ item.force_handlers_enabled | default(omit) }}"
            survey_enabled: "{{ item.survey_enabled | default(omit) }}"
            host_config_key: "{{ item.host_config_key | default(omit) }}"
            survey_spec: "{{ item.survey_spec | from_yaml | default(omit) }}"
            become_enabled: "{{ item.become_enabled | default(omit) }}"
            ask_credential: "{{ item.ask_credential | default(omit) }}"
            ask_diff_mode: "{{ item.ask_diff_mode | default(omit) }}"
            ask_extra_vars: "{{ item.ask_extra_vars | default(omit) }}"
            ask_inventory: "{{ item.ask_inventory  | default(omit) }}"
            ask_job_type: "{{ item.ask_job_type | default(omit) }}"
            ask_limit: "{{ item.ask_limit | default(omit) }}"
            ask_skip_tags: "{{ item.ask_skip_tags | default(omit) }}"
            ask_tags: "{{ item.ask_tags | default(omit) }}"
            ask_verbosity: "{{ item.ask_verbosity | default(omit) }}"
            skip_tags: "{{ item.skip_tags | default(omit) }}"
            limit: "{{ item.limit | default(omit) }}"
            job_tags: "{{ item.job_tags | default(omit) }}"
            start_at_task: "{{ item.start_at_task | default(omit) }}"
            verbosity: "{{ item.verbosity | default('0') }}"
            inventory: "{{ item.inventory | default((awx_inventories | first)['name']) | default(omit) }}"
            extra_vars: "{{ item.extra_vars | default(omit) }}"
            credentials: "{{ item.credentials | default(omit) }}"
            state: "{{ project.state | default('present') }}"
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: "{{ awx_job_templates | default([]) }}"
          loop_control:
            label: "{{ item.name }}"


      always:
        - name: Delete OAuth Token
          awx.awx.tower_token:
            existing_token: '{{ tower_token }}'
            state: absent
            validate_certs: "{{ awx.validate_certs }}"
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
            tower_username: "{{ awx.admin_user }}"
            tower_password: "{{ awx.admin_password }}"
          when:
            - tower_token is defined
      tags:
        - configure-awx
