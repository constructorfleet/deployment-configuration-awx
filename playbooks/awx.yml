---

- name: AWX Install/Configure
  gather_facts: true
  remote_user: root
  hosts:
    - awx
  vars:
    broadcast_websocket_secret: '{{ awx_secret_key }}'
  tasks:
    - name: Install AWX
      block:
        - name: Install Tower-CLI package
          ansible.builtin.pip:
            name: ansible-tower-cli
            state: present

        - name: Create {{ awx_docker_compose_dir }} directory
          ansible.builtin.file:
            path: "{{ awx_docker_compose_dir }}"
            state: directory

        - name: Create Redis socket directory
          ansible.builtin.file:
            path: "{{ awx_docker_compose_dir }}/redis_socket"
            state: directory
            mode: 0777

        - name: Create Docker Compose Configuration
          ansible.builtin.template:
            src: "awx/{{ item }}.j2"
            dest: "{{ awx_docker_compose_dir }}/{{ item }}"
          loop:
            - environment.sh
            - credentials.py
            - nginx.conf
            - redis.conf

        - name: Render SECRET_KEY file
          ansible.builtin.copy:
            content: "{{ awx_secret_key }}"
            dest: "{{ awx_docker_compose_dir }}/SECRET_KEY"

        - name: Build Docker Compose Project
          ansible.builtin.include_role:
            name: docker
          vars:
            docker_compose_projects: "{{ awx_compose_project }}"

        - name: Check AWX Installation Complete via Ping API
          ansible.builtin.uri:
            url: '{{ awx_server_url }}/api/v2/ping'
          retries: 300
          delay: 5
          until: awx_ping_result.status == 200
          register: awx_ping_result
          changed_when: '{{ awx_ping_result.status == 200 }}'
          no_log: false
          ignore_errors: true

        - name: Assert AWX Install/Upgrade Complete
          ansible.builtin.assert:
            that:
              - '{{ awx_ping_result is not failed }}'
            fail_msg: 'AWX Install/Upgrade is taking awhile, come back later for configuration.'
            success_msg: 'AWX Install/Upgrade is complete!'

        - name: Update CA trust in awx_web container
          ansible.builtin.command:
            cmd: "docker exec {{ item }} '/usr/bin/update-ca-trust'"
          loop:
            - awx-web
            - awx-task
      tags:
        - install-awx

    - name: Configure AWX
      block:
        - name: Create AWX OAuth Token
          awx.awx.tower_token:
            description: Build Server Configuring AWX
            scope: write
            state: present
            validate_certs: no
            tower_host: "{{ awx_server_url }}"
            tower_username: "{{ awx_admin_user }}"
            tower_password: "{{ awx_admin_password }}"

        - name: Create AWX Organizations
          awx.awx.tower_organization:
            name: "{{ item.name }}"
            state: "{{ item.state | default('present') }}"
            validate_certs: no
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: '{{ awx_organizations }}'
          loop_control:
            label: '{{ item.name }}'

        - name: Create AWX Inventories
          awx.awx.tower_inventory:
            name: '{{ inventory.name }}'
            description: '{{ inventory.description | default(omit) }}'
            organization: '{{ inventory.organization }}'
            variables: '{{ inventory.variables | default(omit) }}'
            kind: '{{ inventory.kind | default(omit) }}'
            host_filter: '{{ (inventory.host_filter | default(omit)) if (inventory.kind | default("")) == "smart" else omit }}'
            state: '{{ inventory.state | default("present") }}'
            validate_certs: no
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: '{{ awx_inventories | default([]) }}'
          loop_control:
            loop_var: inventory
            label: '{{ inventory.name }}'

        - name: Create AWX Inventory Plugin Source Configurations
          ansible.builtin.copy:
            dest: '{{ inv_plugin.name }}'
            mode: '0777'
            content: '{{ inv_plugin | dict2items | rejectattr("key", "eq", "name") | items2dict| to_nice_yaml }}'
          loop: '{{ awx_inventory_plugins | default([]) }}'
          loop_control:
            loop_var: inv_plugin
            label: '{{ inv_plugin.name }}'

        - name: Create AWX Inventory Sources
          awx.awx.tower_inventory_source:
            name: '{{ inv_source.name }}'
            description: '{{ inv_source.description | default(omit) }}'
            inventory: '{{ inv_source.inventory_name }}'
            source: '{{ inv_source.source }}'
            source_path: '{{ inv_source.path | default(omit) }}'
            source_vars: '{{ inv_source.variables | default(omit) }}'
            enabled_var: '{{ inv_source.enabled.var | default(omit) }}'
            enabled_value: '{{ inv_source.enabled.value | default(omit) }}'
            host_filter: '{{ inv_source.host_filter | default(omit) }}'
            credential: '{{ inv_source.credential_name | default(omit) }}'
            overwrite: '{{ inv_source.overwrite | default(omit) }}'
            overwrite_vars: '{{ inv_source.overwrite_vars | default(omit) }}'
            update_on_launch: '{{ inv_source.update | default(omit) }}'
            update_on_project_update: '{{ inv_source.update | default(omit) }}'
            source_project: '{{ inv_source.project | default(omit) }}'
            state: '{{ inv_source.state | default("present") }}'
            validate_certs: no
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: '{{ awx_inventory_sources | default([]) }}'
          loop_control:
            loop_var: inv_source
            label: '{{ inv_source.name }}'

        - name: Create Additional Tower Credential Types
          awx.awx.tower_credential_type:
            name: "{{ item.name }}"
            description: "{{ item.description | default(omit) }}"
            kind: "{{ item.kind }}"
            inputs: "{{ item.inputs | default(omit) }}"
            injectors: "{{ item.injectors | default(omit) }}"
            state: "{{ item.state | default('present') }}"
            validate_certs: no
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: "{{ awx_credential_types }}"
          loop_control:
            label: "{{ item.name }}"

        - name: Create Tower credentials
          awx.awx.tower_credential:
            name: "{{ item.name }}"
            organization: "{{ item.organization | default('Default') }}"
            state: "{{ item.state | default('present') }}"
            inputs: "{{ item.inputs|default(omit) }}"
            credential_type: "{{ item.credential_type }}"
            validate_certs: no
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
          loop: "{{ awx_credentials }}"
          loop_control:
            label: "{{ item.name }}"

        - name: Update AWX LDAP Settings
          ansible.builtin.uri:
            url: "{{ awx_server_url }}/api/v2/settings/all/"
            user: "{{ awx_admin_user }}"
            password: "{{ awx_admin_password }}"
            method: PATCH
            body: "{{ awx_ldap_settings | items2dict(key_name='name', value_name='value') | default([]) }}"
            force_basic_auth: true
            body_format: json
            validate_certs: false
            return_content: true

#
#
#        - name: Setup Foreman Dynamic Inventory
#          awx.awx.inventory:
#            name: '{{ item.name }}'
#            description: '{{ item.description | default(omit) }}'
#            organization: 'Default'
#            #variables: '{{ item.variables | default(omit) }}'
#            state: '{{ item.state | default("present") }}'
#            validate_certs: false
#            tower_host: '{{ awx_server_url }}'
#            tower_username: '{{ awx_admin_user }}'
#            tower_password: '{{ awx_admin_password }}'
#            variables: '{{ item.variables | default(omit) }}'
#          loop: '{{ awx_inventory_sources }}'
#          loop_control:
#            label: '{{ item.name }}'

    #    - name: Add projects to Tower
    #      awx.awx.project:
    #        name: "{{ item.name }}"
    #        description: "{{ item.description | default(omit) }}"
    #        scm_type: "{{ item.scm_type | default(omit) }}"
    #        scm_credential: "{{ item.scm_credential | default(omit) }}"
    #        scm_clean: "{{ item.scm_clean | default(omit) }}"
    #        scm_branch: "{{ item.scm_branch | default(omit) }}"
    #        scm_update_on_launch: "{{ item.scm_update_on_launch | default(omit) }}"
    #        scm_update_cache_timeout: "{{ item.scm_update_cache_timeout | default(omit) }}"
    #        scm_url: "{{ item.scm_url | default(omit) }}"
    #        local_path: "{{ item.local_path | default(omit) }}"
    #        organization: "{{ item.organization | default('Default') }}"
    #        webhook_service: "{{ item.webhook_service | default(omit) }}"
    #        webhook_credential: "{{ item.webhook_credential | default(omit) }}"
    #        state: "{{ item.state | default('present') }}"
    #        validate_certs: no
    #        tower_host: "{{ awx_server_url }}"
    #        tower_username: "{{ awx_admin_user }}"
    #        tower_password: "{{ awx_admin_password }}"
    #      loop: "{{ awx_projects }}"
    #      loop_control:
    #        label: "{{ item.name }}"
    #      register: project_import
    #      when:
    #        - awx_projects is defined
    #        - awx_projects != None
    #      changed_when: true
      always:
        - name: Delete OAuth Token
          awx.awx.tower_token:
            existing_token: '{{ tower_token }}'
            state: absent
            validate_certs: no
            tower_host: "{{ awx_server_url }}"
            tower_oauthtoken: '{{ tower_token }}'
            tower_username: "{{ awx_admin_user }}"
            tower_password: "{{ awx_admin_passward }}"
          when:
            - tower_token is defined
      tags:
        - configure-awx