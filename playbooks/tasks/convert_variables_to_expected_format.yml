---

- name: Translate LDAP authentication to AWX
  ansible.builtin.set_fact:
    awx_ldap_auth:
      - name: SESSION_COOKIE_AGE
        value: "28800"
      - name: AUTH_LDAP_SERVER_URI
        value: 'ldap://{{ ldap_authentication.host }}:{{ ldap_authentication.server_port }}'
      - name: AUTH_LDAP_BIND_DN
        value: '{{ ldap_authentication.account_dn }}'
      - name: AUTH_LDAP_GROUP_TYPE
        value: PosixGroupType
      - name: AUTH_LDAP_USER_SEARCH
        value:
          - '{{ ldap_authentication.users_base }}'
          - SCOPE_SUBTREE
          - (uid=%(user)s)
      - name: AUTH_LDAP_GROUP_SEARCH
        value:
          - '{{ ldap_authentication.groups_base  }}'
          - SCOPE_SUBTREE
          - (objectClass=posixGroup)
      - name: AUTH_LDAP_USER_ATTR_MAP
        value:
          first_name: '{{ ldap_authentication.attr_firstname }}'
          last_name: '{{ ldap_authentication.attr_lastname }}'
          email: '{{ ldap_authentication.attr_mail }}'
      - name: AUTH_LDAP_GROUP_TYPE_PARAMS
        value:
          name_attr: cn
      - name: AUTH_LDAP_USER_FLAGS_BY_GROUP
        value:
          is_superuser:
            - 'cn=admin,{{ ldap_authentication.groups_base }}'
      - name: AUTH_LDAP_BIND_PASSWORD
        value: '{{ ldap_authentication.account_password }}'
      - name: AUTH_LDAP_ORGANIZATION_MAP
        value: |
          {%- set ns = namespace(organization_map={}, attrs={}) -%}
          {%- for org in organizations -%}
            {%- if org.usergroups is defined -%}
              {%- set ns.attrs = {} -%}
              {%- set admin =
                  org.usergroups
                    | default([])
                    | rejectattr('admin', 'undefined')
                    | rejectattr('ldap_cn', 'undefined')
                    | selectattr('admin', 'true')
                    | selectattr('ldap_cn', 'string')
                    | list
                    | first
                    | default(None) -%}
              {%- if admin is not none -%}
                {%- set ns.attrs =
                      ns.attrs
                        | combine(
                          {
                            'admins': 'cn=' ~ admin['ldap_cn'] ~ ',' ~ ldap_authentication.groups_base,
                            'remove_admins': False
                          }
                        )
                -%}
              {%- endif -%}
              {%- set user =
                  (org.usergroups
                    | default([])
                    | rejectattr('admin', 'defined')
                    | list
                    | first
                    | default(None)) -%}
              {%- if user is not none -%}
                {%- set ns.attrs =
                    ns.attrs
                      | combine(
                        {
                          'users': 'cn=' ~ user['ldap_cn'] ~ ',' ~ ldap_authentication.groups_base,
                          'remove_users': False
                        }
                      )
                -%}
              {%- endif -%}
              {%- set ns.organization_map =
                  ns.organization_map
                    | combine({
                      org.name: ns.attrs
                    })
              -%}
            {%- endif -%}
          {%- endfor -%}
          {{ ns.organization_map }}

- name: Convert hostgroups to a childe->parent map
  ansible.builtin.set_fact:
    user_group_hierarchy: |
      {%- set ns = namespace(groups=[]) -%}
      {%- macro recurse(hostgroup_spec,current,parent) -%}
        {%- for group_spec in hostgroup_spec -%}
          {%- if group_spec.children is defined -%}
            {%- set children = group_spec.pop('children') -%}
            {{
              recurse(
                children,
                [current + [group_spec | combine({'parent': parent})]],
                group_spec.name
              )
            }}
          {%- else -%}
            {%- set ns.groups = [ns.groups + [current + [group_spec | combine({'parent': parent})]]] -%}
            {{ [current + [group_spec | combine({'parent': parent})]] }}
          {%- endif -%}
        {%- endfor -%}
      {%- endmacro -%}
      {%- set x = recurse(hostgroups, []) -%}
      {{ ns.groups | flatten }}

- name: Generate the AWX Compose Project
  ansible.builtin.set_fact:
    awx_compose_project:
      - project_name: awx
        pull: true

        definition:
          version: '3.5'
          x-logging: &default-logging
            driver: journald

          networks:
            awx:
              name: awx
              driver: bridge
              ipam:
                driver: default
                config:
                  - subnet: 172.3.27.0/24

          services:
            redis:
              image: redis
              container_name: awx-redis
              hostname: awx-redis
              restart: unless-stopped
              networks:
                awx:
                  aliases:
                    - redis
                    - awx_redis
              environment:
                http_proxy: "{{ http_proxy | default('') }}"
                https_proxy: "{{ https_proxy | default('') }}"
                no_proxy: "{{ no_proxy | default('') }}"
              command: ["/usr/local/etc/redis/redis.conf"]
              volumes:
                - "{{ awx_docker_compose_dir }}/redis.conf:/usr/local/etc/redis/redis.conf:ro"
                - "{{ awx_docker_compose_dir }}/redis_socket:/var/run/redis/:rw"
            postgres:
              container_name: awx-postgres
              image: postgres:10
              hostname: awx-postgres
              networks:
                awx:
                  aliases:
                    - postgres
                    - awx_postgres
              volumes:
                - "{{ awx_postgres_data_dir }}/10/data/:/var/lib/postgresql/data/pgdata:Z"
              environment:
                POSTGRES_USER: "{{ awx_pg_username }}"
                POSTGRES_PASSWORD: "{{ awx_pg_password }}"
                POSTGRES_DB: awx
                PGDATA: "/var/lib/postgresql/data/pgdata"
                http_proxy: "{{ http_proxy | default('') }}"
                https_proxy: "{{ https_proxy | default('') }}"
                no_proxy: "{{ no_proxy | default('') }}"
              logging:
                <<: *default-logging
                options:
                  tag: awx-postgres

            web:
              container_name: awx-web
              image: "ansible/awx:16.0.0"
              depends_on:
                - redis
                - postgres
                - task
              ports:
                - "{{ awx.port }}:8052"
              networks:
                awx:
                  aliases:
                    - web
                    - awxweb
                    - awx_web
              hostname: awx-web
              user: root
              volumes:
                - "{{ awx_docker_compose_dir }}/SECRET_KEY:/etc/tower/SECRET_KEY"
                - "{{ awx_docker_compose_dir }}/environment.sh:/etc/tower/conf.d/environment.sh"
                - "{{ awx_docker_compose_dir }}/credentials.py:/etc/tower/conf.d/credentials.py"
                - "{{ awx_docker_compose_dir }}/nginx.conf:/etc/nginx/nginx.conf:ro"
                - "{{ awx_docker_compose_dir }}/redis_socket:/var/run/redis/:rw"
                - "{{ awx_project_data_dir }}:/var/lib/awx/projects:rw"
                - '/etc/localtime:/etc/localtime:ro'
              environment:
                http_proxy: "{{ http_proxy | default('') }}"
                https_proxy: "{{ https_proxy | default('') }}"
                no_proxy: "{{ no_proxy | default('') }}"
              logging:
                <<: *default-logging
                options:
                  tag: awx-web

            task:
              container_name: awx-task
              image: "ansible/awx:16.0.0"
              depends_on:
                - redis
                - postgres
              networks:
                awx:
                  aliases:
                    - task
                    - awxtask
                    - awx_task
                    - awx-task
              hostname: awx
              user: root
              command: /usr/bin/launch_awx_task.sh
              volumes:
                - "{{ awx_docker_compose_dir }}/SECRET_KEY:/etc/tower/SECRET_KEY"
                - "{{ awx_docker_compose_dir }}/environment.sh:/etc/tower/conf.d/environment.sh"
                - "{{ awx_docker_compose_dir }}/credentials.py:/etc/tower/conf.d/credentials.py"
                - "{{ awx_docker_compose_dir }}/nginx.conf:/etc/nginx/nginx.conf:ro"
                - "{{ awx_docker_compose_dir }}/redis_socket:/var/run/redis/:rw"
                - "{{ awx_project_data_dir }}:/var/lib/awx/projects:rw"
                - '/etc/localtime:/etc/localtime:ro'
              environment:
                http_proxy: "{{ http_proxy | default('') }}"
                https_proxy: "{{ https_proxy | default('') }}"
                no_proxy: "{{ no_proxy | default('') }}"
              logging:
                <<: *default-logging
                options:
                  tag: awx-web

- name: Set system users for Foreman
  ansible.builtin.set_fact:
    foreman_system_users:
      - name: foreman
        uid: 998
        gid: 998
        home_dir: /usr/share/foreman
        directories:
          - name: .ssh
            mode: '0755'
            files:
              - source: id_rsa.foreman
                dest: id_rsa
                decrypt: true
                mode: '0600'
              - source: id_rsa.foreman.pub
                dest: id_rsa.pub
                decrypt: true
                mode: '0644'
      - name: foreman-proxy
        uid: 997
        gid: 997
        home_dir: /usr/share/foreman-proxy
        directories:
          - name: .ssh
            mode: '0755'
            files:
              - source: id_rsa_foreman_proxy
                dest: id_rsa_foreman_proxy
                decrypt: true
                mode: '0600'
              - source: id_rsa_foreman_proxy.pub
                dest: id_rsa_foreman_proxy.pub
                decrypt: true
                mode: '0644'
